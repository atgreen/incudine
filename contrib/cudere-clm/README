cudere-clm.lisp is the last part of the tutorial called

    First steps with "real" UGens

It shows how to organize the UGEN SPEC's and a way to (re)use VUG and
UGEN's in the style of CLM, the sound synthesis package written by
Bill Schottstaedt at CCRMA (the sound editor Snd includes the
recommended version of CLM actively maintained and enhanced by the
original author).

cudere-clm/score.lisp is a non trivial test for the sound file surfer
defined in incudine/src/soundfile.lisp

With the help of some utilities copied/edited/rewrote for compatibility
from the old common lisp implementation (and also from a recent clm.c
file from Snd), we get a CLM on the anvil.

The original common lisp version uses the RUN macro to translate lisp
code in efficient C code. There is a minimal mechanism in cudere-clm
to read and convert

    (run (loop ... do (declare ...)) ...)

in "efficient" lisp code (it depends on the body of the loop).
It works with v.ins, jcrev.ins, prc-toolkit95.lisp, and other
instruments with unambiguous types (if it fails, you generally
have to fix some coercions). Of course it is possible to write a
better parser/transformer for RUN but I'm not interested.

However, the RUN macro is unnecessary to define new instruments because
they're compiled in lisp (DEFINSTRUMENT also works from REPL).

All the variables, constants and conversions of the header types and
data formats are in config.lisp.

The new variable *CLM-OPTIMIZE-SETTINGS* is `(optimize speed (safety 0))'
by default but we can also write an explicit declaration after
DEFINSTRUMENT (or DEFINSTRUMENT*) to change that default.

We can set some configuration variables in cudere-clm/clm-init.lisp
(ignored by git), for example:

    ;;; incudine/contrib/cudere-clm/clm-init.lisp
    (in-package :clm)

    (setq *clm-file-name* "/tmp/test.wav")
    (setq *clm-player* "sndplay")
    ;(setq *clm-player* "sndplay -start ~A -end ~A")


If incudine-snd is loaded and Snd is started with SND:RUN, the sound
file generated by

    (with-sound (:to-snd t) ...)  ; :to-snd is *to-snd* by default

is automatically opened (the keyword :to-snd is also used in the
original Snd+CLM).
