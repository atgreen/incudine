;;; Copyright (c) 2020 Tito Latini
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

(in-package :incudine.config)

;;; Utilities to write macro definitions of memory barriers in C.
;;;
;;; Currently, they are implemented for ALPHA, ARM64, MIPS, PPC,
;;; RISCV, SPARC 64-BIT, x86 and x86-64 architectures.

(defvar *foreign-barrier-header-pathname*
  (merge-pathnames "barrier.h"
    #.(load-time-value (or *compile-file-pathname* *load-pathname*))))

(defun foreign-barrier-architecture ()
  (or (find-if #'uiop:featurep
               '(:alpha :arm64 :mips :ppc :ppc64 :riscv :x86-64 :x86))
      (and (uiop:featurep :sparc)
           (uiop:featurep :64-bit)
           :sparc)))

(defun write-foreign-barrier-header-file ()
  (with-open-file (f *foreign-barrier-header-pathname*
                   :direction :output :if-exists :supersede)
    (format f
      "/* This file is automatically generated. */~2%~
       #ifndef __INCUDINE_BARRIER_DEF_H~%~
       #define __INCUDINE_BARRIER_DEF_H~2%")
    (define-foreign-memory-barriers f)
    (format f "~%#endif  /* __INCUDINE_BARRIER_DEF_H */~%"))
  *foreign-barrier-header-pathname*)

(defun define-foreign-memory-barriers (stream)
  (labels ((name (type)
             (format nil "~A_memory_barrier()"
                     (case type (mb "full") (rmb "read") (wmb "write"))))
           (rside (value &optional multiline-p)
             (if (stringp value)
                 (format nil "\\~:[~;~%~4Tdo { \\~]~%~8T__asm__ __volatile__(~A)"
                         multiline-p (format nil value))
                 (if value
                     (name value)
                     "\"barrier not implemented yet for this architecture\"")))
           (multiline (lines)
             (format nil "~{~A~^ \\~%~29T~}); \\~%~4T} while (0" lines))
           (def (type value)
             (format nil "#define ~A ~A" (name type)
                     (if (second value)
                         (rside (multiline value) t)
                         (rside (first value))))))
    (macrolet ((mb (&rest rest) `(def 'mb ',rest))
               (rmb (&rest rest) `(def 'rmb ',rest))
               (wmb (&rest rest) `(def 'wmb ',rest)))
      (multiple-value-bind (mb rmb wmb)
          ;; Based on Linux kernel source code.
          #+alpha
            (values
              (mb "\"mb\" ::: \"memory\"")
              (rmb mb)
              (wmb "\"wmb\" ::: \"memory\""))
          #+arm64
            (values
              (mb "\"dmb ish\" ::: \"memory\"")
              (rmb "\"dmb ishld\" ::: \"memory\"")
              (wmb "\"dmb ishst\" ::: \"memory\""))
          #+mips
            (values
              (mb "\".set mips2\\n\\t\""
                  "\"sync\\n\\t\""
                  "\".set mips0\""
                  "::: \"memory\"")
              (rmb mb)
              (wmb mb))
          #+(or ppc ppc64)
            (values
              (mb "\"sync\" ::: \"memory\"")
              (rmb mb)
              (wmb mb))
          #+riscv
            (values
              (mb "\"fence \" #iorw \",\" #iorw ::: \"memory\"")
              (rmb "\"fence \" #ir \",\" #ir ::: \"memory\"")
              (wmb "\"fence \" #ow \",\" #ow ::: \"memory\""))
          #+(and sparc 64-bit)
            (values
              (mb "\"ba,pt %%xcc, 1f\\n\\t\""
                  "\" membar   #StoreLoad\\n\""
                  "\"1:\\n\""
                  "::: \"memory\"")
              (rmb "\"\" ::: \"memory\"")
              (wmb rmb))
          #+x86
            (values
              (mb "\"lock; addl $0,0(%%esp)\" ::: \"memory\"")
              (rmb mb)
              (wmb mb))
          #+x86-64
            (values
              (mb "\"mfence\" ::: \"memory\"")
              (rmb "\"lfence\" ::: \"memory\"")
              (wmb "\"sfence\" ::: \"memory\""))
          #-(or alpha arm64 mips ppc ppc64 riscv (and sparc 64-bit) x86 x86-64)
            (values
              (mb nil)
              (rmb nil)
              (wmb nil))
      (format stream "~A~2%~A~2%~A~%" mb rmb wmb)))))
