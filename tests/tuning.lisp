(in-package :incudine-tests)

(defvar *sclfile*
  (merge-pathnames "tests/test.scl" (asdf:system-source-directory :incudine)))

(deftest sclfile.1
    (load-sclfile *sclfile*)
  (7/4 2147483647/2147483646 3 3 123f0 123f0 -1200.4243f0 200f0 1/2 100f0 5/4)
  11
  "Example with valid pitch lines")

(deftest tuning.1
    (let* ((tun (make-tuning))
           (res1 (list (tuning-description tun) (tuning-cents tun)
                       (tuning-ratios tun) (tuning-keynum-base tun)
                       (sample->fixnum (tuning-freq-base tun))
                       (tuning-degree-index tun)))
           (res2 (mapcar (lambda (k)
                           (sample->fixnum (* (tuning-cps tun k) 100)))
                         (loop for i from 48 to 72 collect i))))
      (free tun)
      (values res1 res2))
  ("12-tone equal temperament"
   #(0f0 100f0 200f0 300f0 400f0 500f0 600f0 700f0 800f0 900f0
     1000f0 1100f0 1200f0)
   #(1 3118/2943 5252/4679 5399/4540 5429/4309 3249/2434 4756/3363
     7523/5021 4813/3032 6041/3592 7831/4395 2943/1559 2)
   69 440 9)
  (13081 13859 14683 15556 16481 17461 18499 19599 20765 21999
   23308 24694 26162 27718 29366 31112 32962 34922 36999 39199
   41530 44000 46616 49388 52325))

(deftest tuning.2
    (let* ((tun (make-tuning
                  :notes '(16/15 9/8 6/5 5/4 4/3 7/5 3/2 8/5 5/3 9/5 15/8 2/1)
                  :keynum-base 60
                  :freq-base 261.625565
                  :degree-index 0))
           (res1 (list (map 'vector (lambda (x) (round (* x 1000)))
                            (tuning-cents tun))
                       (tuning-ratios tun)))
           (res2 (mapcar (lambda (k)
                           (sample->fixnum (* (tuning-cps tun k) 100)))
                         (append (loop for i below 12 collect i)
                                 (loop for i from 116 below 128 collect i)))))
      (free tun)
      (values res1 res2))
  (#(0 111731 203910 315641 386314 498045 582512 701955
     813686 884359 1017596 1088269 1200000)
   #(1 16/15 9/8 6/5 5/4 4/3 7/5 3/2 8/5 5/3 9/5 15/8 2))
  (817 872 919 981 1021 1090 1144 1226 1308 1362 1471 1532
   669761 697668 753481 784876 837201 893015 941852 1004642
   1046502 1116269 1172082 1255802))

(deftest tuning.3
    (let* ((tun (make-tuning
                  :notes '(16/15 203.90999 6/5 386.3137 4/3 582.5122 3/2
                           813.6863 5/3 1017.59625 15/8 1200.0)
                  :keynum-base 60
                  :freq-base 261.625565
                  :degree-index 0))
           (res1 (list (tuning-cents tun) (tuning-ratios tun)))
           (res2 (mapcar (lambda (k)
                           (sample->fixnum (* (tuning-cps tun k) 100)))
                         (append (loop for i below 12 collect i)
                                 (loop for i from 116 below 128 collect i)))))
      (free tun)
      (values res1 res2))
  (#(0f0 111.731285f0 203.90999f0 315.6413f0 386.3137f0 498.045f0 582.5122f0
     701.95496f0 813.6863f0 884.3587f0 1017.59625f0 1088.2687f0 1200f0)
   #(1 16/15 9/8 6/5 5/4 4/3 7/5 3/2 8/5 5/3 9/5 15/8 2))
  (817 872 919 981 1021 1090 1144 1226 1308 1362 1471 1532
   669761 697668 753481 784876 837201 893015 941852 1004642
   1046502 1116269 1172082 1255802))

(deftest tuning.4
    (let ((tun (make-tuning :notes '(16/15 9/8 6/5 5/4 4/3 7/5 3/2 8/5 5/3 9/5
                                     15/8 2/1))))
      (set-tuning tun '(9/8 5/4 4/3 3/2 5/3 15/8 2/1))
      (flet ((tun-test (tun)
               (mapcar (lambda (k)
                         (sample->fixnum (* (tuning-cps tun k) 100)))
                       (append (loop for i below 12 collect i)
                               (loop for i from 48 below 72 collect i)))))
        (let ((res1 (list (map 'vector (lambda (x) (round (* x 1000)))
                               (tuning-cents tun))
                          (tuning-ratios tun)))
              (res2 (tun-test tun)))
          (set-tuning-reference tun 60 261.625565 0)
          (setf (tuning-description tun) "SET-TUNING-REFERENCE test.")
          (let ((res3 (tuning-description tun))
                (res4 (tun-test tun)))
            (free tun)
            (values res1 res2 res3 res4)))))
  (#(0 203910 386314 498045 701955 884359 1088269 1200000)
   #(1 9/8 5/4 4/3 3/2 5/3 15/8 2))
  (45 51 57 64 68 77 85 91 103 114 128 137
   5500 5866 6600 7333 8250 8800 9900 11000 11733 13200
   14666 16500 17600 19800 22000 23466 26400 29333 33000
   35200 39600 44000 46933 52800)
  "SET-TUNING-REFERENCE test."
  (68 76 85 95 102 114 127 136 153 170 191 204
   8175 8720 9810 10901 12263 13081 14716 16351 17441 19621
   21802 24527 26162 29432 32703 34883 39243 43604 49054
   52325 58865 65406 69766 78487))

(deftest tuning.5
    (let ((tun (make-tuning)))
      (loop for freq in '(264 281.6 297 316.80002d0 330 352 369.6
                          396 422.4 440 475.19998 495 528)
            for keynum from 60
            do (setf (tuning-cps tun keynum) freq))
      (tuning-notes-from-data tun 60 72 "TUNING-NOTES-FROM-DATA test.")
      (let ((res1 (list (tuning-description tun)
                        (map 'vector (lambda (x) (round (* x 1000)))
                             (tuning-cents tun))
                        (tuning-ratios tun)))
            (res2 (mapcar (lambda (k)
                            (sample->fixnum (* (tuning-cps tun k) 100)))
                          (append (loop for i below 12 collect i)
                                  (loop for i from 116 below 128 collect i)))))
        (free tun)
        (values res1 res2)))
  ("TUNING-NOTES-FROM-DATA test."
   #(0 111731 203910 315641 386314 498045 582512 701955
     813686 884359 1017596 1088269 1200000)
   #(1 16/15 9/8 6/5 5/4 4/3 7/5 3/2 8/5 5/3 9/5 15/8 2))
  (825 880 928 990 1031 1100 1155 1237 1320 1375 1485 1546
   675840 704000 760320 792000 844800 901120 950400 1013760
   1056000 1126400 1182720 1267200))

(deftest tuning.6
    (let ((tun (make-tuning
                 :notes '(293377/275041 57547/51153 83539/69616 107001/85601
                          132365/99274 69703/49788 433894/289263 155171/96982
                          276853/166112 1438049/798916 561752/299601 2))))
      (flet ((ratios () (cdr (coerce (tuning-ratios tun) 'list))))
        (let ((res1 (ratios)))
          (minimize-tuning-ratios tun)
          (let ((res2 (ratios)))
            (free tun)
            (values res1 res2)))))
  (293377/275041 57547/51153 83539/69616 107001/85601 132365/99274 69703/49788
   433894/289263 155171/96982 276853/166112 1438049/798916 561752/299601 2)
  (16/15 9/8 6/5 5/4 4/3 7/5 3/2 8/5 5/3 9/5 15/8 2))

(deftest tuning.7
    (with-cleanup (mapcar (lambda (x) (sample->fixnum (* x 100)))
                          (buffer->list (make-tuning))))
  (817 866 917 972 1030 1091 1156 1224 1297 1374 1456 1543 1635 1732
   1835 1944 2060 2182 2312 2449 2595 2749 2913 3086 3270 3464 3670
   3889 4120 4365 4624 4899 5191 5499 5827 6173 6540 6929 7341 7778
   8240 8730 9249 9799 10382 10999 11654 12347 13081 13859 14683 15556
   16481 17461 18499 19599 20765 21999 23308 24694 26162 27718 29366
   31112 32962 34922 36999 39199 41530 44000 46616 49388 52325 55436
   58732 62225 65925 69845 73998 78399 83060 87999 93232 98776 104650
   110873 117465 124450 131851 139691 147997 156798 166121 175999
   186465 197553 209300 221746 234931 248901 263702 279382 295995
   313596 332243 351999 372931 395106 418600 443492 469863 497803
   527404 558765 591991 627192 664487 703999 745862 790213 837201
   886984 939727 995606 1054808 1117530 1183982 1254385))

;; The number of pitch values is always greater than one.
(deftest tuning.8
    (with-cleanup (length (tuning-cents (make-tuning :notes '(1)))))
  2)

(deftest with-cleanup-tuning.1
    (free-p (with-cleanup (make-tuning)))
  T)

(deftest with-cleanup-tuning.2
    (mapcar #'free-p
            (with-cleanup
              (let ((t0 (make-tuning)))
                (list t0 (copy-tuning t0)))))
  (T T))

(deftest copy-tuning.1
    (with-cleanup
      (let ((orig *default-tuning*)
            (cp (copy-tuning *default-tuning*)))
        (every #'zerop
          (append (map 'list #'- (tuning-cents cp) (tuning-cents orig))
                  (map 'list #'- (tuning-ratios cp) (tuning-ratios orig))))))
  T)

(defvar *carlos-beta-tuning*
  (make-tuning
    :notes '(63.8 127.6 191.4 255.2 319.0 382.8 446.6 510.4 574.2 638.0 701.8
             765.6 829.4 893.2 957.0 1020.8 1084.6 1148.4 1212.2 1276.0 1339.8
             1403.6)
    :description "Wendy Carlos' Beta scale with perfect fifth divided by eleven"
    :keynum-base 69
    :freq-base 440
    :degree-index 9))

(deftest pch->cps.1
    (loop for oct from 3 to 13
          append (loop for i from 0f0 to .11f0 by .01f0
                       collect (sample->fixnum
                                 (* (pch->cps (+ oct i) incudine::*tuning-et12*)
                                    1000))))
  (8175 8661 9177 9722 10300 10913 11562 12249 12978 13749 14567 15433 16351
   17323 18354 19445 20601 21826 23124 24499 25956 27500 29135 30867 32703 34647
   36708 38890 41203 43653 46249 48999 51913 55000 58270 61735 65406 69295 73416
   77781 82406 87307 92498 97998 103826 110000 116540 123470 130812 138591 146832
   155563 164813 174614 184997 195997 207652 220000 233081 246941 261625 277183
   293665 311126 329627 349228 369995 391994 415304 440000 466164 493882 523251
   554366 587331 622252 659254 698457 739990 783989 830609 880000 932329 987764
   1046502 1108732 1174662 1244505 1318509 1396914 1479981 1567979 1661218
   1760001 1864659 1975529 2093004 2217464 2349324 2489011 2637019 2793828
   2959962 3135958 3322436 3520003 3729318 3951058 4186008 4434928 4698649
   4978023 5274039 5587657 5919925 6271916 6644872 7040006 7458637 7902117
   8372017 8869856 9397298 9956047 10548079 11175315 11839850 12543832 12543853
   12543853 12543853 12543853))

;;; Table lookup used in Csound's cpspch opcode.
(deftest pch->cps.2
    (loop for oct from 3 to 13
          append (loop for i from 0f0 to .11f0 by .01f0
                       collect (truncate
                                 (* (pch->cps (+ oct i) nil) 1000))))
  (8175 8661 9176 9721 10300 10913 11561 12249 12977 13748 14566 15433 16351
   17322 18353 19445 20600 21826 23122 24498 25955 27499 29133 30866 32703 34645
   36707 38890 41201 43652 46245 48996 51911 54999 58267 61733 65406 69291 73414
   77781 82402 87304 92490 97993 103823 109999 116534 123467 130812 138583 146828
   155563 164804 174609 184981 195986 207646 219999 233068 246934 261625 277166
   293656 311100 329608 349218 369994 391973 415292 439999 466137 493869 523251
   554333 587313 622201 659217 698436 739988 783946 830585 879999 932274 987738
   1046502 1108667 1174626 1244402 1318435 1396873 1479977 1567893 1661171
   1759999 1864549 1975477 2093004 2217335 2349252 2488805 2636871 2793746
   2959955 3135786 3322343 3519999 3729099 3950954 4186008 4434671 4698504
   4977610 5273743 5587493 5919910 6271573 6644687 7039999 7458198 7901909
   8372017 8869343 9397008 9955221 10547486 11174987 11839820 12543146 13289375
   14079999 14916397 15803819))

(deftest pch->cps.3
    (subseq (loop for oct from 4 to 11
                  unless (= oct 6)
                    append (loop for i from .0d0 to .211d0 by .01d0
                                 collect (sample->fixnum
                                           (* (pch->cps (+ oct i)
                                                        *carlos-beta-tuning*)
                                              1000))))
            6 134)
  (34603 35902 37250 38649 40099 41605 43167 44787 46468 48213 50023 51901 53849
   55870 57968 60144 62402 64744 67175 69697 72313 75028 77844 80766 83798 86944
   90208 93595 97108 100753 104536 108460 112532 116756 121139 125687 130405
   135300 140379 145649 151117 156790 162676 168783 175119 181693 188513 195590
   202933 210551 218455 226655 235164 243992 253151 262655 272515 282745 293359
   304372 315798 327653 339953 352715 365955 379693 393947 408736 424080 439999
   456517 473655 491435 509884 529025 548884 569489 590868 613049 636063 659940
   684714 710418 737087 764758 793466 823253 854158 886223 919491 954009 989822
   1026980 1065532 1105532 1147034 1190093 1234769 1281122 1329215 1379114
   1430885 1484601 1540332 1598156 1658150 1720397 1784980 1851988 1921511
   1993644 2068486 2146136 2226702 2310291 2397019 2487003 2580365 2677231
   2777734 2882009 2990199 3102451 3218916 3339754 3465128 3595207 3730171))

(defun cps->pch-test (tuning length)
    (loop for i below length
          for cps = 8.175798f0 then (* cps (expt 2 1/12))
          collect (floor (cps->pch cps tuning) 1f-5)))

(deftest cps->pch.1
    (cps->pch-test incudine::*tuning-et12* 128)
  (300000 301000 302000 303000 304000 305000 306000 307000 308059 309000 310000
   311000 400000 401000 402000 403000 404000 405000 406000 407000 408000 409000
   410000 411000 500000 501000 502000 503000 504000 505000 506000 507000 508000
   509000 510000 511000 600000 601000 602000 603000 604000 605000 606000 607000
   608000 609000 610000 611000 700000 701000 702000 703000 704000 705000 706000
   707000 708000 709000 710000 711000 800000 801000 802000 803000 804000 805000
   806000 807000 808000 809000 810000 811000 900000 901000 902000 903000 904000
   905000 906000 907000 908000 909000 910000 911000 1000000 1001000 1002000
   1003000 1004000 1005000 1006000 1007000 1008000 1009000 1010000 1011000
   1100000 1101000 1102000 1103000 1104000 1105000 1106000 1107000 1108000
   1109000 1110000 1111000 1200000 1201000 1202000 1203000 1204000 1205000
   1206000 1207000 1208000 1209000 1210000 1211000 1300000 1301000 1302000
   1303000 1304000 1305000 1306000 1307000))

(deftest cps->pch.2
    (cps->pch-test *carlos-beta-tuning* 108)
  (385655 386029 386426 386846 387291 387762 388262 388791 389352 389946 390575
   391242 391949 392697 393490 394330 395221 396164 397163 398221 399343 400531
   401790 403123 404536 406033 407597 409172 410733 412300 413874 415450 417006
   418569 420138 421704 501272 502840 504406 505978 507540 509111 510676 512244
   513812 515378 516949 518512 520083 521647 701216 702783 704350 705920 707484
   709057 710619 712188 713755 715322 716891 718456 720027 721591 801160 802726
   804294 805863 807428 809000 810563 812132 813698 815266 816834 818400 819972
   821534 901104 902670 904238 905806 907371 908942 910506 912077 913641 915210
   916777 918343 919914 921478 1001049 1002613 1004182 1005749 1007315 1008885
   1010450 1012021 1013585 1015154 1016720 1018288 1019856 1021422 1100993
   1101000))

(deftest pch->keynum.1
    (equal (subseq
             (mapcar #'pch->keynum
                     (loop for oct from 3 to 14
                           append (loop for i to .11 by .01
                                        collect (+ oct i 1e-6))))
             0 128)
           (loop for k below 128 collect k))
  T)

(deftest pch->keynum.2
    (equal (subseq
             (mapcar (lambda (x) (pch->keynum x *carlos-beta-tuning*))
                     (loop for oct from 4 to 11
                           unless (= oct 6) ; jump from 5.21 to 7.00
                             append (loop for i to .211 by .01
                                          collect (+ oct i 1e-6))))
             6 134)
           (loop for k below 128 collect k))
  T)

(deftest keynum->pch.1
    (equal (loop for k below 128 collect (keynum->pch k))
           (butlast (loop for oct from 3 to 13
                          append (loop for i from 0f0 to .11f0 by .01f0
                                       collect (+ oct i)))
                    4))
  T)

(deftest keynum->pch.2
    (equal (loop for k below 128 collect (keynum->pch k *carlos-beta-tuning*))
           (subseq (loop for oct from 4 to 11
                         unless (= oct 6) ; jump from 5.21 to 7.00
                           append (loop for i from 0f0 to .211f0 by .01f0
                                        collect (+ oct i)))
                   6 134))
  T)
