(in-package :incudine-tests)

(defun midi-note-prio-vec (channel)
  (vug::midi-table-note-priority-vec (svref vug::*midi-table* channel)))

(defun midi-note-veloc-vec (channel)
  (vug::midi-table-note-velocity-vec (svref vug::*midi-table* channel)))

(deftest reset-midi-notes.1
    (macrolet ((foreach-prio-vec ((vec-var ch index) &body body)
                 `(dotimes (,ch 16)
                    (let ((,vec-var (midi-note-prio-vec ,ch)))
                      (dotimes (,index (length ,vec-var))
                        ,@body)))))
      (let ((sum 0))
        (foreach-prio-vec (vec ch i)
          (setf (svref vec i) (1+ ch)))
        (reset-midi-notes)
        (foreach-prio-vec (vec ch i)
          (incf sum (svref vec i)))
        sum))
  0)

(deftest low/highest-note-priority.1
    (let ((pvec (midi-note-prio-vec 0))
          (vvec (midi-note-veloc-vec 0))
          (res nil))
      (flet ((add-result ()
               (push (list (vug::lowest-note-priority pvec)
                           (vug::highest-note-priority pvec)
                           (vug::%last-note-on pvec)
                           (vug::%last-note-off pvec))
                     res))
             (note-on (keynum)
               (vug::note-priority-add pvec vvec keynum 100))
             (note-off (keynum)
               (vug::note-priority-remove pvec vvec keynum)))
        (reset-midi-notes 0)
        (add-result)
        (mapc #'note-on (list 58 43 99 37 100 26 95 16 103 68))
        (add-result)
        (mapc #'note-off (list 16 100 68))
        (add-result)
        (note-on 22)
        (note-off 103)
        (add-result)
        (reset-midi-notes 0)
        (nreverse res)))
  ((0 0 0 0) (16 103 68 0) (26 103 68 68) (22 99 22 103)))

(deftest played-midi-note.1
    (let ((klist (list 10 30 50 70 90 110))
          (res nil))
      (reset-midi-notes)
      (dotimes (ch 16)
        (push (equal (multiple-value-list (played-midi-note 0 ch))
                     '(0 0 nil))
              res))
      (dotimes (ch 16)
        (dolist (k klist)
          (vug::note-priority-add (midi-note-prio-vec ch)
                                  (midi-note-veloc-vec ch)
                                  (+ k ch) 100)))
      (dotimes (ch 16)
        (let ((acc nil))
          (dotimes (i 128)
            (multiple-value-bind (k v p) (played-midi-note i ch)
              (cond (p (push k acc))
                    (t (push (equal (nreverse acc)
                                    (mapcar (lambda (x) (+ x ch)) klist))
                             res)
                       (return)))))))
      (reset-midi-notes)
      (count t res))
  32)
