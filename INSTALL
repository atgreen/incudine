Installation Instructions
*************************

Requirements:

Incudine works with SBCL, an implementation of ANSI Common Lisp with a
high-performance native compiler.

- Common Lisp packages
  + Alexandria
  + Bordeaux-threads
  + CFFI
  + Swap-bytes
  + [Optional] Linedit for incudine command

- Foreign libraries
  + Pthread
  + JACK or PortAudio >= 1.9
  + PortMidi
  + libsndfile >= 1.0.19
  + FFTW >= 3.0
  + GNU Scientific Library (GSL)
  + [Optional] FluidSynth
  + [Optional] LILV

  Some Linux distributions provide separated devel packages necessary
  to compile Incudine, for example jack-audio-connection-kit-devel,
  portaudio-devel, etc.

Put the incudine directory where ASDF finds your systems, for example:

    mv incudine ${HOME}/common-lisp/

If you use Quicklisp:

    mv incudine /path/to/quicklisp/local-projects/

Edit and copy the configuration file, with particular attention to the
priorities *RT-PRIORITY*, *NRT-PRIORITY* and *RECEIVER-DEFAULT-PRIORITY*

    cp /path/to/incudine/incudinerc-example ${HOME}/.incudinerc

If MMCSS (Multimedia Class Scheduler Service) is available on Windows,
the realtime thread is associated with the "Pro Audio" task.

Here is a test:

(require :incudine)
(in-package :scratch)
(dsp! hello-world () (out (sine 440 .3)))
(rt-start)
;; You should hear an oscillation at 440 Hz.
(hello-world)
(free 0)
(rt-stop)
;; It writes a soundfile.
(bounce-to-disk ("/tmp/test.wav" :channels 1 :duration 1) (hello-world))

Emacs and Texinfo are required to build the documentation:

    cd doc/manual && make info html pdf

This builds the Info, HTML and PDF documentation from the Org and
Texinfo sources.

If you want to create and install the incudine command:

    cd src && sh install_executable

The options for the script `install_executable' are:

    --prefix=PREFIX       install architecture-independent files in PREFIX
                          [/usr/local]
    --bindir=DIR          user executables [PREFIX/bin]
    --swank-loader=PATH   support for Swank server with path to swank-loader.lisp
    --without-aclrepl     do not use Allegro CL-style Read-Eval-Print Loop.
    --with-clm            use cudere-clm, the Incudine version of CLM
    --with-linedit        support for Linedit, readline-style library in CL.
    --with-fluidsynth     support for FluidSynth SoundFont synthesizer.
    --with-ladspa         support for LADSPA plugins.
    --with-lv2            support for LV2 plugins.
    --with-snd            support for the sound editor Snd.
    --with-module=NAME    load the module NAME before to create the executable.
    --save-options=OPTS   further arguments for SAVE-LISP-AND-DIE.
    --sbcl-options=OPTS   options for SBCL.
    --before-save=FORM    read and evaluate FORM before to create the executable.

For example:

    sh install_executable --with-linedit --with-ladspa --with-snd  \
                          --with-module=ltk --with-module=dsp-collection

or with Swank server and other options:

    sh install_executable --with-linedit --with-fluidsynth \
                          --with-ladspa --with-lv2 --with-snd \
                          --swank-loader=/path/to/slime/swank-loader.lisp \
                          --with-module=inferior-shell \
                          --before-save="(use-package 'inferior-shell :scratch)"


Note: the support for LV2 plugins requires Lilv, a LV2 host library.

If you use SLIME, add these lines to ${HOME}/.swank.lisp

;; Avoid problems in realtime because the default value is :SPAWN (each
;; request in a separate thread)
#+sbcl (setf swank:*communication-style* :sigio)
;; Useful to redirect standard output from any other threads into the REPL
#+sbcl (defparameter swank:*globally-redirect-io* t)

There is also a major mode for GNU Emacs. If you want to install it,
add the following lines to your .emacs file:

(push "/path/to/incudine/contrib/editors/emacs" load-path)
(require 'incudine)
;; org-babel functions
(require 'ob-incudine)
