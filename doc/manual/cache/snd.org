*** Sound editor Snd
Interface to interact with Snd.

#+texinfo: @noindent
To load ~incudine-snd~ use ~asdf:load-system~ or ~require~.

#+attr_texinfo: :options {Variable} snd:*program-name*
#+begin_defvr
Snd command line program name.
#+end_defvr

#+attr_texinfo: :options {Variable} snd:*program-args*
#+begin_defvr
Snd command line argument list.
#+end_defvr

#+attr_texinfo: :options {Variable} snd:*tmpfile*
#+begin_defvr
Full path of the temporary soundfile.
#+end_defvr

#+attr_texinfo: :options {Condition} snd:snd-error
#+begin_deftp
All types of error conditions about the sound
editor Snd inherit from this condition.
#+end_deftp

#+attr_texinfo: :options snd:run @andoptional{} program-name args
#+begin_defun
Start Snd.
#+end_defun

#+attr_texinfo: :options snd:eval string @andkey{} format-arguments output-p parser
#+begin_defun
The ~string~ with optional ~format-arguments~ is evaluated by Snd.

If ~output-p~ is ~t~ (default), return the output of Snd.
#+end_defun

#+attr_texinfo: :options snd:load scmfile @andoptional{} s7-env-string
#+begin_defun
Load the scheme ~file~ in Snd.

The optional string ~s7-env-string~ is the s7 environment.
#+end_defun

#+attr_texinfo: :options snd:exit
#+begin_defun
Terminate the Snd process started by ~run~.
#+end_defun

#+attr_texinfo: :options snd:flush-stream
#+begin_defun
Flush anything waiting on the Snd stream.
#+end_defun

#+attr_texinfo: :options snd:close-stream
#+begin_defun
Close the Snd stream.
#+end_defun

#+attr_texinfo: :options snd:emacs-mode-p
#+begin_defun
Return ~t~ to enable the interaction through the Emacs' Snd-Scheme mode.
Setfable.

It requires ~slime-enable-evaluate-in-emacs~ ~t~ on the Emacs side.
#+end_defun

#+attr_texinfo: :options {Macro} snd:enable-sharp-s7-syntax
#+begin_deffn
Enable the reader syntax used to format and eval s7 forms.

Example:

: #s7(let ((snd (open-sound "foo.wav")))
:      (play snd :wait #t))
:
: ;; => "(let ((snd (open-sound \"foo.wav\"))) (play snd :wait #t))"
:
: #s7(quote #.(LOOP REPEAT 8 COLLECT (RANDOM 1.0)))
:
: ;; => "(quote
: ;;      (0.5520501 0.4115485 0.35940528 0.0056368113 0.31019592
: ;;       0.4214077 0.32522345 0.2879219))"
:
: (format nil #s7(new-sound "/tmp/foo.wav" :channels 1 :size ~D)
:         (floor incudine.util:*sample-rate*))
:
: ;; => "(new-sound \"/tmp/foo.wav\" :channels 1 :size 48000)"
:
: (snd:eval *)   ; => (SOUND 0)
:
: #snd(...)   is equivalent to  (snd:eval #s7(...))
: #0snd(...)  is equivalent to  (snd:eval #s7(...) :output-p nil)
:
: hidden side effect:  #7s is equivalent to #s7
:
: (defstruct point x y)
: #s(point)
: ;; => #S(POINT :X NIL :Y NIL)
#+end_deffn

#+attr_texinfo: :options snd:open-or-update-sound file
#+begin_defun
If no sound is found that matches the soundfile ~file~, open that
file in Snd. Otherwise, update the sound.
#+end_defun

#+attr_texinfo: :options snd:mix file @andoptional{} arguments output-p
#+begin_defun
Mix the ~file~ in Snd by applying the Snd function ~mix~ to the ~arguments~.

Suppress output if ~output-p~ is ~nil~.
#+end_defun

#+attr_texinfo: :options snd:float-vector fvec-name obj @andoptional{} start end
#+begin_defun
Define a float-vector in Snd named ~fvec-name~ initialized with the
content of a ~incudine:buffer~ structure, a list, a vector or ~end~ minus
~start~ values generated by a ~gen~ routine.

The sequence is optionally bounded by ~start~ and ~end~.
#+end_defun

#+attr_texinfo: :options snd:sound->buffer id-or-filename @andrest{} buffer-load-args
#+begin_defun
Create a new ~incudine:buffer~ structure by loading the sound
~id-or-filename~.

~buffer-load-args~ are the optional arguments for ~incudine:buffer-load~.
#+end_defun

#+attr_texinfo: :options snd:selection->buffer @andrest{} buffer-load-args
#+begin_defun
Create a new ~incudine:buffer~ structure by loading the current selection.

~buffer-load-args~ are the optional arguments for ~incudine:buffer-load~.
#+end_defun

#+attr_texinfo: :options snd:region->buffer region-id @andrest{} buffer-load-args
#+begin_defun
Create a new ~incudine:buffer~ structure by loading the region ~region-id~.

~buffer-load-args~ are the optional arguments for ~incudine:buffer-load~.
#+end_defun

#+attr_texinfo: :options snd:mix->buffer mix-id @andrest{} buffer-load-args
#+begin_defun
Create a new ~incudine:buffer~ structure by loading the mix ~mix-id~.

~buffer-load-args~ are the optional arguments for ~incudine:buffer-load~.
#+end_defun

#+attr_texinfo: :options snd:float-vector->buffer fvec-string @andrest{} buffer-load-args
#+begin_defun
Create a new ~incudine:buffer~ structure by loading the float-vector
~fvec-string~.

~buffer-load-args~ are the optional arguments for ~incudine:buffer-load~.
#+end_defun

#+attr_texinfo: :options snd:buffer->sound buf file @andrest{} buffer-save-args
#+begin_defun
The content of a ~incudine:buffer~ structure is saved in the soundfile ~file~
and opened in Snd.

~buffer-save-args~ are the arguments for ~incudine:buffer-save~.
#+end_defun

#+attr_texinfo: :options snd:buffer->mix buf @andrest{} args
#+begin_defun
The content of a ~incudine:buffer~ structure is mixed in Snd.

If the first argument in ~args~ is a list, it has the arguments for the
Snd function ~mix~ (file is optional). The rest of the arguments are
passed to ~incudine:buffer-save~.
#+end_defun

#+attr_texinfo: :options snd:map-channel function @andkey{} beg dur snd chn origin
#+begin_defun
Apply ~function~ to each sample of the channel ~chn~ in ~snd~ (id or
filename), starting at sample ~beg~ for ~dur~ samples, replacing the
current value with whatever ~function~ returns.

~function~ is a procedure of one argument (the current sample), can
return ~nil~, which means that the data passed in is deleted (replaced by
nothing), or a number which replaces the current sample, or ~t~ which
halts the mapping operation, leaving trailing samples unaffected, or a
sequence the contents of which are spliced into the edited version,
effectively replacing the current sample with any number of samples.

~beg~ defaults to 0 and ~dur~ defaults to the full length of the sound.

~snd~ and ~chn~ default to the currently selected sound.

See map-channel in Snd.
#+end_defun

#+attr_texinfo: :options snd:env-channel env @andkey{} beg dur snd chn origin
#+begin_defun
Apply the amplitude envelope ~env~, an ~incudine:envelope~ structure,
to the given channel ~chn~ of ~snd~ starting at sample ~beg~ for ~dur~ samples.

~beg~ defaults to 0 and ~dur~ defaults to the full length of the sound.

~snd~ and ~chn~ default to the currently selected sound.

See env-channel in Snd.
#+end_defun

#+attr_texinfo: :options snd:env-selection env @andkey{} origin
#+begin_defun
Apply the amplitude envelope ~env~, an ~incudine:envelope~ structure,
to the selection.

See env-selection in Snd.
#+end_defun

#+attr_texinfo: :options {Macro} bounce-to-snd (outfile @andrest{} args) @andbody{} body
#+begin_deffn
Apply ~bounce-to-disk~ to ~outfile~ and the arguments ~args~, then open
~outfile~ in Snd.
#+end_deffn

#+attr_texinfo: :options {Macro} bounce-to-snd-mix (outfile @andrest{} args) @andbody{} body
#+begin_deffn
Apply ~bounce-to-disk~ to ~outfile~ and the arguments ~args~, then mix
~outfile~ in Snd by calling ~mix~.

If the first argument in ~args~ is a list, it has the arguments for the
Snd function ~mix~ (without file). The rest of the arguments are passed
to ~bounce-to-disk~.

Example:

: (dsp! hello-snd (c i a o)
:   (stereo (+ (sine c i) (sine a o))))
:
: (bounce-to-snd-mix ("mix-1.wav" '(48000 t))
:   (hello-snd 1000 .2 1220 .1))
#+end_deffn

#+texinfo: @page
