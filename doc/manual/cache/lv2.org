*** LV2 plugin
LV2 audio plugin interface for Incudine.

#+texinfo: @noindent
To load ~incudine-lv2~ use ~asdf:load-system~ or ~require~.

#+attr_texinfo: :options {Macro} vug:lv2->vug uri vug-name @andkey{} block-size control-arguments-p debug-p
#+begin_deffn
Define a new VUG and the auxiliary function named ~vug-name~ to use
the LV2 plugin with ~uri~.

Initialize the Lilv World if necessary.

The control parameter ~plugin-instance~ is set to the plugin instance
during the DSP initialization. It is possible to retrieve the plugin
instance through ~control-value~. This functionality works only with a
VUG or an inlined UGEN.

If ~control-arguments-p~ is ~t~ (default), all the LV2 controls are
optional keywords of the auxiliary function. If the LV2 plugin provides
many control ports, ~lv2->vug~ fails with a "Control stack exhausted"
error. In this case, set ~control-arguments-p~ to ~nil~, retrieve the plugin
instance via ~control-value~ and use ~vug-foreign:plugin-port-pointer~ out
of the DSP.

If the incudine block size changes, ~lv2->vug~ should be called again.

If ~debug-p~ is ~t~, return the lisp form to define the VUG.

Return the new VUG structure.

Example of a LV2 effect:

: (lv2->vug "http://plugin.org.uk/swh-plugins/amp" swh.amp)
:
: (dsp! amp-test (gain)
:   (out (swh.amp gain (white-noise))))

Example of a LV2 instrument:

: (set-rt-block-size 64)
:
: (lv2->vug SYNTH-TEST-URI synth-test)
:
: ;; Note: the control parameter PLUGIN could be of type T for simplicity.
: (dsp! lv2-synth-test ((plugin (or null vug-foreign:plugin-instance)))
:   (:defaults nil)
:   (with ((out (cffi:null-pointer)))
:     (declare (type pointer out))
:     ;; If the instrument has many control ports, we can use
:     ;; VUG-FOREIGN:PLUGIN-PORT-POINTER out of the DSP.
:     (setf out (synth-test :plugin-instance plugin))
:     (foreach-frame
:       ;; Plugin with a single audio output port.
:       (stereo (sample (f32-ref out current-frame)))
:       ;; Plugin with multiple audio output ports, for example two:
:       ;; (out (sample (f32-ref (ptr-ref out 0) current-frame))
:       ;;      (sample (f32-ref (ptr-ref out 1) current-frame))))))
:
: (rt-start)
: (lv2-synth-test :id 123)
:
: (defvar *synth-test* (control-value 123 'plugin))
:
: *synth-test*
: ;; => #<LV2-PLUGIN-INSTANCE ...>
:
: (defvar *midiin* (jackmidi:open))
:
: (make-responder *midiin*
:   (lambda (st d1 d2)
:     (lv2:write-event *synth-test* (lv2:midi-message st d1 d2))))
:
: (recv-start *midiin*)
:
: (defun set-lv2-control (plugin port-index value)
:   ;; Change the port value in rt-thread.
:   (rt-eval ()
:     (setf (f32-ref (vug-foreign:plugin-port-pointer plugin port-index))
:           (coerce value 'single-float)))
:   value)
:
: ;; Read the Turtle description of plugin /path/to/SYNTH-TEST.ttl
: ;; or run the command lv2info to know the port indices.
: (set-lv2-control *synth-test* PORT-INDEX 0.1)
:
: (f32-ref (vug-foreign:plugin-port-pointer *synth-test* PORT-INDEX))
: ;; => 0.1
:
: ;; We can set more port values from nrt-thread with a single
: ;; memory barrier or CAS.
: (rt-eval ()
:   (set-lv2-control ...)
:   (set-lv2-control ...)
:   ...)
#+end_deffn

#+attr_texinfo: :options lv2:write-event plugin data @andkey{} index type start end
#+begin_defun
Send an event through an Atom port of a LV2 ~plugin~. The buffer type
of the Atom port is Atom Sequence.

~data~ is a short MIDI message encoded into four bytes or a vector of
octets where ~start~ and ~end~ are the optional bounding index designators.

If the plugin has more than one input event port, ~index~ is the array
index of the input event ports.

The event ~type~ is a URID (an integer) obtained from ~lv2:uri-to-id~.
It is a MIDI event by default.
#+end_defun

#+attr_texinfo: :options lv2:midi-message @andrest{} octets
#+begin_defun
Return a MIDI message encoded for ~lv2:write-event~.
#+end_defun

#+attr_texinfo: :options set-lv2-tuning tuning plugin @andkey{} event-index device-id program single-note-tuning-p checksum-function
#+begin_defun
Send a bulk tuning dump message as a LV2 MIDI message. It obviously
works if the LV2 synthesizer supports it. The new frequencies are
related to a ~tuning~ structure.

If the plugin has more than one input event port, ~event-index~ is the
array index of the input event ports.

If ~single-note-tuning-p~ is non-NIL, send 128 single note tuning change
messages instead.

The optional ~checksum-function~ requires two arguments: the foreign
buffer containing the MIDI SysEx message and the buffer size in bytes.
It is useful if the manufacturer implements a different checksum.

~event-index~, ~device-id~ and ~program~ default to 0.
#+end_defun

#+attr_texinfo: :options lv2:uri-to-id uri
#+begin_defun
Get the numeric identifier of a Uniform Resource Identifier,
a string that identifies a resource.
#+end_defun

#+attr_texinfo: :options lv2:id-to-uri id
#+begin_defun
Get the Uniform Resource Identifier for a mapped numeric ~id~
obtained from ~lv2:uri-to-id~.

Example:

: (lv2:uri-to-id "http://lv2plug.in/ns/ext/midi#MidiEvent")
: ;; => 62
: (lv2:id-to-uri 62)
: ;; => "http://lv2plug.in/ns/ext/midi#MidiEvent"
#+end_defun

#+attr_texinfo: :options {Constant} lv2:+midi-event+
#+begin_defvr
Numeric identifier of http://lv2plug.in/ns/ext/midi#MidiEvent.
#+end_defvr

#+attr_texinfo: :options lv2:features
#+begin_defun
Return the NULL-terminated foreign array of LV2 Features supported by
Incudine. The foreign array is allocated during the initialization of the
Lilv World.
#+end_defun

#+attr_texinfo: :options {Structure} lv2:atom-sequence
#+begin_deftp
#+end_deftp

#+attr_texinfo: :options {Structure} lv2:event
#+begin_deftp
#+end_deftp

#+attr_texinfo: :options lilv:lv2-init
#+begin_defun
Initialize the Lilv World that represents all Lilv state.
#+end_defun

#+attr_texinfo: :options {Variable} lilv:*world*
#+begin_defvr
#+end_defvr

#+attr_texinfo: :options {Variable} lilv:*uri-audio-port*
#+begin_defvr
#+end_defvr

#+attr_texinfo: :options {Variable} lilv:*uri-control-port*
#+begin_defvr
#+end_defvr

#+attr_texinfo: :options {Variable} lilv:*uri-input-port*
#+begin_defvr
#+end_defvr

#+attr_texinfo: :options {Variable} lilv:*uri-output-port*
#+begin_defvr
#+end_defvr

#+attr_texinfo: :options {Variable} lilv:*uri-atom-port*
#+begin_defvr
#+end_defvr

#+attr_texinfo: :options {Variable} lilv:*uri-event-port*
#+begin_defvr
#+end_defvr

#+attr_texinfo: :options {Variable} lilv:*uri-midi-port*
#+begin_defvr
#+end_defvr

#+attr_texinfo: :options {Structure} lilv:world
#+begin_deftp
#+end_deftp

#+attr_texinfo: :options {Structure} lilv:instance
#+begin_deftp
#+end_deftp

#+attr_texinfo: :options lilv:free-p obj
#+begin_defun
#+end_defun

#+attr_texinfo: :options {Generic Function} lilv:free obj
#+begin_deffn
#+end_deffn

#+attr_texinfo: :options lilv:plugin-pointer uri
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:uri-to-path uri
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:file-uri-parse uri hostname
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:new-uri world uri
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:new-string world str
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:new-int world val
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:new-float world val
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:new-bool world val
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:node-free val
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:node-duplicate val
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:node-equals value other
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:node-get-turtle-token value
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:node-is-uri value
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:node-as-uri value
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:node-is-blank value
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:node-as-blank value
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:node-is-literal value
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:node-is-string value
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:node-as-string value
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:node-get-path value hostname
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:node-is-float value
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:node-as-float value
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:node-is-int value
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:node-as-int value
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:node-is-bool value
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:node-as-bool value
#+begin_defun
#+end_defun

#+attr_texinfo: :options {Macro} lilv:with-node (var type value) @andbody{} body
#+begin_deffn
Bind ~var~ to a newly allocated Lilv node of ~type~ with dynamic extent
during ~body~.

~type~ is one of ~:bool~, ~:float~, ~:int~, ~:string~ or ~:uri~.
#+end_deffn

#+attr_texinfo: :options {Macro} lilv:with-nodes bindings @andbody{} body
#+begin_deffn
Create bindings to newly allocated Lilv nodes with dynamic extent
during ~body~.

~bindings~ is a list of lists

: (var type value)

where ~var~ is the variable bound to a node of ~type~.

~type~ is one of ~:bool~, ~:float~, ~:int~, ~:string~ or ~:uri~.
#+end_deffn

#+attr_texinfo: :options lilv:plugin-classes-free collection
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-classes-size collection
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-classes-begin collection
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-classes-get collection i
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-classes-next collection i
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-classes-is-end collection i
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-classes-get-by-uri classes uri
#+begin_defun
#+end_defun

#+attr_texinfo: :options {Macro} lilv:plugin-class-loop (var plugin-classes) @andrest{} keywords-and-forms
#+begin_deffn
Iterate over the ~plugin-classes~ with ~var~ bound to each class.
~lilv:plugin-class-loop~ supports ~keywords-and-forms~ of the ~loop~ macro.
#+end_deffn

#+attr_texinfo: :options lilv:scale-points-free collection
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:scale-points-size collection
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:scale-points-begin collection
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:scale-points-get collection i
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:scale-points-next collection i
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:scale-points-is-end collection i
#+begin_defun
#+end_defun

#+attr_texinfo: :options {Macro} lilv:scale-point-loop (var scale-points) @andrest{} keywords-and-forms
#+begin_deffn
Iterate over the ~scale-points~ with ~var~ bound to each point.
~lilv:scale-point-loop~ supports ~keywords-and-forms~ of the ~loop~ macro.
#+end_deffn

#+attr_texinfo: :options lilv:uis-free collection
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:uis-size collection
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:uis-begin collection
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:uis-get collection i
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:uis-next collection i
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:uis-is-end collection i
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:uis-get-by-uri uis uri
#+begin_defun
#+end_defun

#+attr_texinfo: :options {Macro} lilv:ui-loop (var uis) @andrest{} keywords-and-forms
#+begin_deffn
Iterate over the ~uis~ with ~var~ bound to each ~ui~.
~lilv:ui-loop~ supports ~keywords-and-forms~ of the ~loop~ macro.
#+end_deffn

#+attr_texinfo: :options lilv:nodes-free collection
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:nodes-size collection
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:nodes-begin collection
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:nodes-get collection i
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:nodes-next collection i
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:nodes-is-end collection i
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:nodes-get-first collection
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:nodes-contains values value
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:nodes-merge a b
#+begin_defun
#+end_defun

#+attr_texinfo: :options {Macro} lilv:node-loop (var nodes) @andrest{} keywords-and-forms
#+begin_deffn
Iterate over the ~nodes~ with ~var~ bound to each node.
~lilv:node-loop~ supports ~keywords-and-forms~ of the ~loop~ macro.

Example:

: (lilv:node-loop (n lilv-nodes)
:   if (lilv:node-is-uri n) collect (lilv:node-as-uri n))
#+end_deffn

#+attr_texinfo: :options lilv:plugins-size collection
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugins-begin collection
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugins-get collection i
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugins-next collection i
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugins-is-end collection i
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugins-get-by-uri plugins uri
#+begin_defun
#+end_defun

#+attr_texinfo: :options {Macro} lilv:plugin-loop (var plugins) @andrest{} keywords-and-forms
#+begin_deffn
Iterate over the ~plugins~ with ~var~ bound to each plugin.
~lilv:plugin-loop~ supports ~keywords-and-forms~ of the ~loop~ macro.

Example:

: (lilv:init-world)
: (lilv:plugin-loop (p (lilv:world-get-all-plugins lilv:*world*))
:   collect (lilv:node-as-uri (lilv:plugin-get-uri p)))
#+end_deffn

#+attr_texinfo: :options lilv:init-world
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:world-new
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:world-set-option world uri value
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:world-load-all world
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:world-load-bundle world bundle-uri
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:world-load-resource world resource
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:world-get-plugin-class world
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:world-get-plugin-classes world
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:world-get-all-plugins world
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:world-find-nodes world subject predicate object
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:world-get world subject predicate object
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:world-ask world subject predicate object
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-verify plugin
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-uri plugin
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-bundle-uri plugin
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-data-uris plugin
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-library-uri plugin
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-name plugin
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-class plugin
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-value p predicate
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-has-feature p feature-uri
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-supported-features p
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-required-features p
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-optional-features p
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-has-extension-data p uri
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-extension-data p
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-num-ports p
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-port-ranges-float p min-values max-values def-values
#+begin_defun
#+end_defun

#+attr_texinfo: :options {Macro} lilv:plugin-get-num-ports-of-class p class-1 @andrest{} varargs0
#+begin_deffn
#+end_deffn

#+attr_texinfo: :options lilv:plugin-has-latency p
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-latency-port-index p
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-port-by-index plugin index
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-port-by-symbol plugin symbol
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-port-by-designation plugin port-class designation
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-project plugin
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-author-name plugin
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-author-email plugin
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-author-homepage plugin
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-is-replaced plugin
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-write-description world plugin base-uri plugin-file
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-write-manifest-entry world plugin base-uri manifest-file plugin-file-path
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-get-related plugin type
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:port-get-value plugin port predicate
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:port-get plugin port predicate
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:port-get-properties plugin port
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:port-has-property p port property-uri
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:port-supports-event p port event-type
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:port-get-index plugin port
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:port-get-symbol plugin port
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:port-get-name plugin port
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:port-get-classes plugin port
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:port-is-a plugin port port-class
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:port-get-range plugin port deflt min max
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:port-get-scale-points plugin port
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:state-new-from-world world map subject
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:state-new-from-file world map subject path
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:state-new-from-string world map str
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:state-new-from-instance plugin instance map file-dir copy-dir link-dir save-dir get-value user-data flags features
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:state-free state
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:state-equals a b
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:state-get-num-properties state
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:state-get-plugin-uri state
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:state-get-label state
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:state-set-label state label
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:state-restore state instance set-value user-data flags features
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:state-save world map unmap state uri dir filename
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:state-to-string world map unmap state uri base-uri
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:scale-point-get-label point
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:scale-point-get-value point
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-class-get-parent-uri plugin-class
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-class-get-uri plugin-class
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-class-get-label plugin-class
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-class-get-children plugin-class
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:plugin-instantiate plugin sample-rate features
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:instance-get-descriptor instance
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:instance-get-handle instance
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:instance-get-uri instance
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:instance-connect-port instance port-index data-location
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:instance-activate instance
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:instance-deactivate instance
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:instance-run instance sample-count
#+begin_defun
#+end_defun

#+attr_texinfo: :options {Macro} lilv:instance-impl-slot-value instance-ptr slot-name
#+begin_deffn
#+end_deffn

#+attr_texinfo: :options {Macro} lilv:instance-slot-value instance slot-name
#+begin_deffn
#+end_deffn

#+attr_texinfo: :options lilv:connect-port callback handle index data-location
#+begin_defun
#+end_defun

#+attr_texinfo: :options {Macro} lilv:descriptor-slot-value pointer slot-name
#+begin_deffn
#+end_deffn

#+attr_texinfo: :options lilv:plugin-get-uis plugin
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:ui-get-uri ui
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:ui-get-classes ui
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:ui-is-a ui class-uri
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:ui-is-supported ui supported-func container-type ui-type
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:ui-get-bundle-uri ui
#+begin_defun
#+end_defun

#+attr_texinfo: :options lilv:ui-get-binary-uri ui
#+begin_defun
#+end_defun

#+texinfo: @page
