(eval-when (:compile-toplevel :load-toplevel)
  (define-vug foscil (amp cps car mod ndx (buf buffer))
    "A basic FM oscillator."
    (with-samples ((fcar (* cps car))
                   (fmod (* cps mod))
                   (amod (* ndx fmod)))
      (osc buf (+ fcar (osc buf fmod amod 0 :linear)) amp 0 :linear)))

  (define-vug expon (start dur end)
    "Exponential curve between two points."
    (x-line start end dur #'free))

  (define-vug pan (in (buf buffer) pos)
    "Stereo panpot."
    (with ((tab (buffer-data buf))
           (frames (1- (buffer-frames buf)))
           (index (sample->fixnum (* pos frames))))
      (with-samples ((left (smp-ref tab (- frames index)))
                     (right (smp-ref tab index)))
        (cond ((= current-channel 0) (* left in))
              ((= current-channel 1) (* right in))
              (t +sample-zero+))))))

(dsp! texture (dur freq pos (pan-buf buffer) (osc-buf buffer))
  "FM oscillator test."
  (with-samples ((env (expon 1 dur 0.01)))
    (foreach-channel
      (cout (pan (foscil (* env 0.128) freq 1 2.41 (* env 6) osc-buf)
                 pan-buf pos)))))

(declaim (special buf1 buf2))

(defscore-statement f1 (time size gen pna stra phsa)
  (declare (ignore gen))
  `(,time (lambda ()
            (setf buf1 (make-buffer ,size
                         :fill-function (gen:partials '((,pna ,stra ,phsa))))))))

(defscore-statement f2 (time size gen str1)
  (declare (ignore gen))
  `(,time (lambda ()
            (setf buf2 (make-buffer (logand ,size #xFFFFFE)
                         :fill-function (gen:partials '(,str1)))))))

(defscore-statement i1 (time dur freq pan)
  (list time 'texture `(dur ,dur) freq pan 'buf1 'buf2))
